package restapi

import (
	"context"
	"encoding/json"
	"net/http"

	"github.com/jinzhu/copier"

	"{{.PackagePath}}{{.Directory}}/usecase/{{LowerCase .Name}}/port"	
)

// {{PascalCase .Name}} ...
func {{PascalCase .Name}}(inputPort port.{{PascalCase .Name}}Inport) http.HandlerFunc {

	type dtoRequest struct { {{range .InportRequestFields}}
		{{.Name}} {{.Type}} `json:"{{CamelCase .Name}}"` // {{end}}
	}

	type dtoResponse struct { {{range .InportResponseFields}}
		{{.Name}} {{.Type}} `json:"{{CamelCase .Name}}"` // {{end}}
	}

	return func(w http.ResponseWriter, r *http.Request) {

		// receive request
		var jsonReq dtoRequest
		if err := json.NewDecoder(r.Body).Decode(&jsonReq); err != nil {
			_ = responseBody(w, err.Error(), http.StatusBadRequest)
			return
		}

		// convert to request for usecase
		var req port.CreateOrderRequest
		if err := copier.Copy(&req, jsonReq); err != nil {
			_ = responseBody(w, err.Error(), http.StatusBadRequest)
			return
		}

		// run the usecase
		ctx := context.Background()
		res, err := inputPort.Handle(ctx, req)
		if err != nil {
			_ = responseBody(w, err.Error(), http.StatusBadRequest)
			return
		}

		// convert back to response object
		var jsonRes dtoResponse
		if err := copier.Copy(&jsonRes, res); err != nil {
			_ = responseBody(w, err.Error(), http.StatusBadRequest)
			return
		}

		// return the response
		_ = responseBody(w, jsonRes, http.StatusOK)

	}
}

func responseBody(w http.ResponseWriter, body interface{}, statusCode int) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(statusCode)
	bytes, errJSON := json.Marshal(body)
	if errJSON != nil {
		return errJSON
	}
	if _, errWrite := w.Write(bytes); errWrite != nil {
		return errWrite
	}
	return nil
}

