package restapi

import (
	"context"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/jinzhu/copier"

	"{{.PackagePath}}{{.Directory}}/usecase/{{LowerCase .Name}}/port"
)

// {{PascalCase .Name}} ...
func {{PascalCase .Name}}(inputPort port.{{PascalCase .Name}}Inport) gin.HandlerFunc {

	type dtoRequest struct { {{range .InportRequestFields}}
		{{.Name}} {{.Type}} `json:"{{CamelCase .Name}}"` // {{end}}
	}

	type dtoResponse struct { {{range .InportResponseFields}}
		{{.Name}} {{.Type}} `json:"{{CamelCase .Name}}"` // {{end}}
	}

	return func(c *gin.Context) {

		// receive json
		var jsonReq dtoRequest
		if err := c.BindJSON(&jsonReq); err != nil {
			c.JSON(http.StatusBadRequest, err.Error())
			return
		}

		// convert to request
		var req port.{{PascalCase .Name}}Request
		if err := copier.Copy(&req, jsonReq); err != nil {
			c.JSON(http.StatusBadRequest, err.Error())
			return
		}

		// run the usecase
		ctx := context.Background()
		res, err := inputPort.Handle(ctx, req)
		if err != nil {
			c.JSON(http.StatusBadRequest, err.Error())
			return
		}

		var jsonRes dtoResponse
		if err := copier.Copy(&jsonRes, res); err != nil {
			c.JSON(http.StatusBadRequest, err.Error())
			return
		}

		// return the response
		c.JSON(http.StatusOK, jsonRes)


		//		// assign value from query to request object
		//		var req port.{{PascalCase .Name}}Request
		//		{ {{range .InportRequestFields}}
		//			// req.{{PascalCase .Name}} = c.DefaultQuery("{{CamelCase .Name}}", "") {{end}}
		//		}
		//
		//		// run the usecase
		//    ctx := context.Background()
		//    res, err := inputPort.Handle(ctx, req)
		//		if err != nil {
		//			c.JSON(http.StatusBadRequest, err.Error())
		//			return
		//		}
		//

		//
		//		// return the response
		//		c.JSON(http.StatusOK, jsonRes)

	}
}
