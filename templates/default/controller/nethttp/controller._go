package {{LowerCase .ControllerName}}

import (
	"context"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"

	"{{.PackagePath}}/usecase/{{LowerCase .UsecaseName}}/port"
)

// {{PascalCase .UsecaseName}} ...
func {{PascalCase .UsecaseName}}Handler(inputPortObj interface{}) http.HandlerFunc {

	inputPort, ok := inputPortObj.(port.{{PascalCase .UsecaseName}}Inport)
	if !ok {
		panic("Cannot convert inputPort into {{PascalCase .UsecaseName}}Inport")
	}

	return func(w http.ResponseWriter, r *http.Request) {

		jsonReq, _ := ioutil.ReadAll(r.Body)

		log.Printf("Controller {{PascalCase .UsecaseName}}Handler Request  %v", string(jsonReq))

		var req port.{{PascalCase .UsecaseName}}Request

		if err := json.Unmarshal(jsonReq, &req); err != nil {
			log.Printf("Controller {{PascalCase .UsecaseName}}Handler Response %v", err.Error())
			http.Error(w, err.Error(), http.StatusBadRequest)
			return
		}

		res, err := inputPort.Execute(context.Background(), req)
		if err != nil {
			log.Printf("Controller {{PascalCase .UsecaseName}}Handler Response %v", err.Error())
			http.Error(w, err.Error(), http.StatusBadRequest)
			return
		}

		jsonRes, _ := json.Marshal(res)
		fmt.Fprint(w, string(jsonRes))

		log.Printf("Controller {{PascalCase .UsecaseName}}Handler Response %v", string(jsonRes))

	}
}
